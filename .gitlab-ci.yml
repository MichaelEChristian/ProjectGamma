stages:
 - test # run tests and check for code quality
 - build # run build e.g. npm install and start, etc. after tests
 - deploy # run deploy after build finishes

backend-accounts-unit-test-job:
  image: python:3-bullseye
  stage: test
  script:
    - cd backend/accounts/api
    - pip install -r requirements.txt
    - python -m pytest

lint-test-job:
  image: python:3-bullseye
  stage: test
  script:
    - pip install flake8
    - flake8 backend

backend-accounts-test:
  image: python:3-bullseye
  stage: test
  script:
    - cd backend/accounts/tests
    - pip install -r requirements.txt
    - python -m pytest

build-front-end-job:
  rules:
    -if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  stage: build
  image: node:lts-bullseye
  needs:
    - lint-test-job
    - backend-accounts-unit-test-job
    - backend-accounts-test
    # - any other tests that need to past
  script:
    - cd frontend/ghi
    # - npm install -D tailwindcss
    - npm install --legacy-peer-deps --save
    - npm run build
    - cp build/index.html build/404.html
  artifacts:
    paths:
      - ghi/build/

pages:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  dependencies:
    - build-front-end-job
  needs:
    - build-front-end-job
  script:
    - mv ghi/build public
  artifacts:
    paths:
      - public
